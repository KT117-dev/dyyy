name: Build and Release

on: 
  push:
    branches: [ main ]
    tags:
      - "v*"  # 推送版本标签时触发正式发布
  pull_request:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: true
          fetch-depth: 0  # 获取完整提交历史

      - name: Check cache
        run: |
          echo upstream_heads=`git ls-remote https://github.com/roothhide/theos | head -n 1 | cut -f 1`-`git ls-remote https://github.com/theos/sdks | head -n 1 | cut -f 1` >> $GITHUB_ENV

      - name: Use cache
        id: cache
        uses: actions/cache@v4.2.1
        with:
          path: ${{ github.workspace }}/theos
          key: ${{ runner.os }}-${{ env.upstream_heads }}

      - name: Prepare Theos
        uses: k372872244/theos-action@main

      - name: Setup GNU Make
        run: |
          echo "$(brew --prefix)/opt/make/libexec/gnubin" >> $GITHUB_PATH

      - name: Build packages
        run: |
          mkdir -p packages  # 确保目录存在
          make clean
          for scheme in rootless roothide; do
            make package THEOS_PACKAGE_SCHEME=$scheme FINALPACKAGE=1 -j$(sysctl -n hw.ncpu)
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: deb-packages
          path: ${{ github.workspace }}/packages/*.deb

  release:
    needs: build
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.2.0
        with:
          name: deb-packages
          path: release-packages

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ contains(github.ref, 'tags/') && github.ref || format('nightly-{0}', github.sha) }}
          release_name: ${{ contains(github.ref, 'tags/') && 'Stable Release' || 'Nightly Build' }}
          draft: false
          prerelease: ${{ !contains(github.ref, 'tags/') }}
          body: |
            Auto-generated package build
            Commit: ${{ github.sha }}
            Build Date: ${{ steps.get-date.outputs.date }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/*.deb
          asset_name: ${{ contains(github.ref, 'tags/') && 'Stable' || 'Nightly' }}_Package.deb
          asset_content_type: application/vnd.debian.binary-package
